// Generate a PDF for all subjects/grades for a student

export async function generateAllSubjectsReportPdf(reports: any[]) {
  if (!reports || reports.length === 0) throw new Error('No reports provided');
  const student = reports[0].student as any;
  const pdfDoc = await PDFDocument.create();
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);

  // Cover page
  const cover = pdfDoc.addPage([595, 842]);
  let y = 800;
  const drawText = (page: any, text: string, size = 18, color = rgb(0,0,0), x = 50) => {
    page.drawText(text, { x, y, size, font, color });
    y -= size + 10;
  };
  drawText(cover, 'EduSphere Academic Report', 28, rgb(0.4,0.2,0.7), 50);
  y -= 10;
  drawText(cover, `Student: ${student.name}`);
  drawText(cover, `Email: ${student.email}`);
  drawText(cover, `Date: ${new Date().toLocaleDateString()}`);
  drawText(cover, `Total Subjects: ${reports.length}`);
  y -= 10;
  drawText(cover, '--- Subject Reports ---', 16, rgb(0.2,0.2,0.2));

  // Table page
  let page = pdfDoc.addPage([595, 842]); // A4 size
  let tableY = 780;
  const leftMargin = 40;
  const colWidths = [90, 60, 60, 60, 60, 60, 80, 80];
  const headers = [
    'Subject',
    'Class',
    'Title',
    'Score',
    'Grade',
    'Position',
    'No. on Roll',
    'Date',
  ];

  // Draw table headers
  let x = leftMargin;
  for (let i = 0; i < headers.length; i++) {
    page.drawText(headers[i], { x, y: tableY, size: 12, font, color: rgb(0.2,0.2,0.5) });
    x += colWidths[i];
  }
  tableY -= 22;

  // Draw table rows
  for (const report of reports) {
    const course = report.course as any;
    // Defensive: If course is missing, skip row
    if (!course) continue;
    // Get total students for this course
    let totalStudents = 'N/A';
    try {
      totalStudents = (await StudentReport.countDocuments({ course: course._id }))?.toString() ?? 'N/A';
    } catch {}
    const row = [
      course.subject || 'N/A',
      course.gradeLevel || 'N/A',
      course.title || 'N/A',
      typeof report.finalScore === 'number' ? report.finalScore.toFixed(2) : 'N/A',
      report.grade || 'N/A',
      report.position !== undefined && report.position !== null ? report.position.toString() : 'N/A',
      totalStudents,
      report.createdAt ? new Date(report.createdAt).toLocaleDateString() : 'N/A',
    ];
    x = leftMargin;
    for (let i = 0; i < row.length; i++) {
      page.drawText(row[i], { x, y: tableY, size: 11, font, color: rgb(0,0,0) });
      x += colWidths[i];
    }
    tableY -= 18;
    // If tableY is too low, add a new page and reset tableY
    if (tableY < 60) {
      tableY = 780;
      x = leftMargin;
      const newPage = pdfDoc.addPage([595, 842]);
      // Redraw headers on new page
      for (let i = 0; i < headers.length; i++) {
        newPage.drawText(headers[i], { x, y: tableY, size: 12, font, color: rgb(0.2,0.2,0.5) });
        x += colWidths[i];
      }
      tableY -= 22;
      page = newPage;
    }
  }

  // Footer
  page.drawText('Generated by EduSphere', { x: leftMargin, y: 40, size: 10, font, color: rgb(0.5,0.5,0.5) });

  const pdfBytes = await pdfDoc.save();
  return pdfBytes;
}
import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';
import StudentReport from '@/models/StudentReport';
import Course from '@/models/Course';
import User from '@/models/User';

export async function generateStudentReportPdf(reportId: string) {
  const report = await StudentReport.findById(reportId).populate('student course');
  if (!report) throw new Error('Report not found');
  const student = report.student as any;
  const course = report.course as any;
  const totalStudents = await StudentReport.countDocuments({ course: course._id });

  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([595, 842]); // A4 size
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);

  let y = 800;
  const drawText = (text: string, size = 14, color = rgb(0,0,0), x = 50) => {
    page.drawText(text, { x, y, size, font, color });
    y -= size + 8;
  };

  // Header
  drawText('EduSphere Academic Report', 20, rgb(0.4,0.2,0.7));
  y -= 10;
  drawText(`Student: ${student.name}`);
  drawText(`Class: ${course.gradeLevel}`);
  drawText(`Subject: ${course.subject}`);
  drawText(`Date: ${new Date().toLocaleDateString()}`);
  drawText(`Total Students: ${totalStudents}`);
  drawText(`Class Position: ${report.position}`);
  drawText(`Final Score: ${report.finalScore.toFixed(2)}`);
  drawText(`Grade: ${report.grade}`, 18, rgb(0.2,0.5,0.2));
  y -= 10;
  drawText('--- Breakdown ---', 14, rgb(0.2,0.2,0.2));
  // Optionally add more breakdown details here

  if (report.manualAdjustments && (report.manualAdjustments.score || report.manualAdjustments.grade)) {
    drawText('Manual Adjustments:', 12, rgb(0.7,0.2,0.2));
    if (report.manualAdjustments.score) drawText(`Adjusted Score: ${report.manualAdjustments.score}`);
    if (report.manualAdjustments.grade) drawText(`Adjusted Grade: ${report.manualAdjustments.grade}`);
  }

  // Footer
  y = 60;
  drawText('Generated by EduSphere', 10, rgb(0.5,0.5,0.5));

  const pdfBytes = await pdfDoc.save();
  return pdfBytes;
}
